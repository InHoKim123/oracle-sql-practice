SELECT EMPNO, RPAD(SUBSTR(EMPNO, 1, 2), 4, '*') MASKING_EMPNO, ENAME, RPAD(SUBSTR(ENAME, 1, 1), 5, '*') MASKING_ENAME
  FROM EMP;
  
SELECT EMPNO, ENAME, SAL, TRUNC((SAL/21.5), 2) DAY_PAY, ROUND((SAL/21.5/8), 1) TIME_PAY
  FROM EMP;
  
  
SELECT EMPNO, ENAME, TO_CHAR(HIREDATE, 'YYYY/MM/DD') HIREDATE, TO_CHAR(NEXT_DAY(ADD_MONTHS(HIREDATE, 3), 'MON'), 'YYYY-MM-DD') R_JOB, 
       CASE
        WHEN COMM IS NULL THEN 'N/A'
        WHEN COMM IS NOT NULL THEN TO_CHAR(COMM)
       END COMM
  FROM EMP;
  
  
  
SELECT EMPNO, ENAME, MGR
      ,CASE
        WHEN MGR IS NULL THEN '0000'
        WHEN MGR LIKE '75%' THEN '5555'
        WHEN MGR LIKE '76%' THEN '6666'
        WHEN MGR LIKE '77%' THEN '7777'
        WHEN MGR LIKE '78%' THEN '8888'
        ELSE TO_CHAR(MGR)
      END CHG_MGR
  FROM EMP;




SELECT DEPTNO, JOB, SUM(SAL)
  FROM EMP
GROUP BY ROLLUP(DEPTNO, JOB);



SELECT DEPTNO, JOB, COUNT(*), SUM(SAL), GROUPING(DEPTNO), GROUPING(JOB), GROUPING_ID(DEPTNO, JOB)
  FROM EMP
GROUP BY CUBE(DEPTNO, JOB)
ORDER BY DEPTNO, JOB;




SELECT DEPTNO, LISTAGG(ENAME, ', ') WITHIN GROUP(ORDER BY SAL DESC) ENAMES
  FROM EMP
GROUP BY DEPTNO;


SELECT DEPTNO, JOB, MAX(SAL)
  FROM EMP
GROUP BY DEPTNO, JOB
ORDER BY DEPTNO, JOB;


SELECT *
  FROM (
        SELECT DEPTNO, JOB, SAL
          FROM EMP
       )
  PIVOT(MAX(SAL) FOR DEPTNO IN (10, 20, 30))
ORDER BY JOB;



SELECT DEPTNO, TRUNC(AVG(SAL), 0) AVG_SAL, MAX(SAL) MAX_SAL, MIN(SAL) MIN_SAL, COUNT(*) CNT
  FROM EMP
GROUP BY DEPTNO
ORDER BY DEPTNO DESC;


SELECT JOB, COUNT(*)
  FROM EMP
GROUP BY JOB
HAVING COUNT(*) >= 3;


SELECT TO_CHAR(HIREDATE, 'YYYY') HIRE_YEAR, DEPTNO, COUNT(*) CNT
  FROM EMP
GROUP BY TO_CHAR(HIREDATE, 'YYYY'), DEPTNO
ORDER BY TO_CHAR(HIREDATE, 'YYYY');


SELECT NVL2(COMM, 'O', 'X') EXIST_COMM, COUNT(*) CNT
  FROM EMP
GROUP BY NVL2(COMM, 'O', 'X')
ORDER BY COUNT(*) DESC;


SELECT DEPTNO, TO_CHAR(HIREDATE, 'YYYY') HIRE_YEAR, COUNT(*) CNT, MAX(SAL) MAX_SAL, SUM(SAL) SUM_SAL, AVG(SAL) AVG_SAL
  FROM EMP
GROUP BY ROLLUP(DEPTNO, TO_CHAR(HIREDATE, 'YYYY'))
ORDER BY DEPTNO, TO_CHAR(HIREDATE, 'YYYY');


SELECT *
  FROM EMP E, DEPT D
 WHERE E.DEPTNO = D.DEPTNO;
 
 
 
SELECT E.EMPNO, E.ENAME, E.SAL, D.DEPTNO, D.DNAME, D.LOC
  FROM EMP E, DEPT D
 WHERE E.DEPTNO = D.DEPTNO
   AND SAL >= 3000;
 
 
 
 
SELECT *
  FROM EMP E, SALGRADE S
 WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL;
 
 
 
SELECT E1.EMPNO, E1.ENAME, E1.MGR, E2.EMPNO MGR_EMPNO, E2.ENAME MGR_ENAME
  FROM EMP E1, EMP E2
 WHERE E1.MGR = E2.EMPNO(+)
ORDER BY E1.EMPNO;
 
SELECT E1.EMPNO, E1.ENAME, E1.MGR, E2.EMPNO MGR_EMPNO, E2.ENAME MGR_ENAME
  FROM EMP E1, EMP E2
 WHERE E1.MGR(+) = E2.EMPNO
ORDER BY E1.EMPNO; 


SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE, E.SAL, E.COMM, DEPTNO, D.DNAME, D.LOC
  FROM EMP E NATURAL JOIN DEPT D
ORDER BY DEPTNO, E.EMPNO;


SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE, E.SAL, E.COMM, DEPTNO, D.DNAME, D.LOC
  FROM EMP E JOIN DEPT D USING(DEPTNO)
 WHERE SAL >= 3000
ORDER BY DEPTNO, E.EMPNO;


SELECT E1.EMPNO, E1.ENAME, E1.MGR, E2.EMPNO MGR_EMPNO, E2.ENAME MGR_ENAME
  FROM EMP E1 LEFT OUTER JOIN EMP E2 ON (E1.MGR = E2.EMPNO)
ORDER BY E1.EMPNO;



SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE, E.SAL, E.COMM, DEPTNO, D.DNAME, D.LOC
  FROM EMP E JOIN DEPT D USING (DEPTNO)
 WHERE E.SAL >= 3000
   AND E.MGR IS NOT NULL
ORDER BY DEPTNO, E.EMPNO;


SELECT D.DEPTNO, D.DNAME, E.EMPNO, E.ENAME, E.SAL
  FROM EMP E, DEPT D
 WHERE E.DEPTNO = D.DEPTNO
   AND E.SAL > 2000;



SELECT D.DEPTNO, D.DNAME,TRUNC(AVG(E.SAL), 0) AVG_SAL, MAX(E.SAL) MAX_SAL, MIN(E.SAL) MIN_SAL, COUNT(*) CNT
  FROM EMP E, DEPT D
 WHERE E.DEPTNO = D.DEPTNO
GROUP BY D.DEPTNO, D.DNAME
ORDER BY D.DEPTNO;



SELECT D.DEPTNO, D.DNAME, E.EMPNO, E.ENAME, E.JOB, E.SAL
  FROM EMP E, DEPT D
 WHERE E.DEPTNO(+) = D.DEPTNO
ORDER BY D.DEPTNO, D.DNAME;


SELECT *
  FROM SALGRADE;


SELECT D.DEPTNO, D.DNAME, E1.EMPNO, E1.ENAME, E1.MGR, E1.SAL, E2.DEPTNO DEPTNO_1, S1.LOSAL, S1.HISAL, S1.GRADE, E2.EMPNO MGR_EMPNO, E2.ENAME MGR_ENAME
  FROM EMP E1, DEPT D, EMP E2, SALGRADE S1
 WHERE D.DEPTNO = E1.DEPTNO(+)
   AND E1.MGR = E2.EMPNO(+)
   AND (E1.SAL BETWEEN S1.LOSAL AND S1.HISAL)
ORDER BY E1.DEPTNO, E1.EMPNO;
   


SELECT D.DEPTNO, D.DNAME, E1.EMPNO, E1.ENAME, E1.MGR, E1.SAL
 FROM EMP E1, DEPT D
 WHERE D.DEPTNO = E1.DEPTNO(+);


SELECT *
  FROM EMP
 WHERE SAL > (
                SELECT SAL
                  FROM EMP
                 WHERE ENAME = 'JONES'
             );



SELECT *
  FROM EMP
 WHERE HIREDATE < (
                    SELECT HIREDATE
                      FROM EMP
                     WHERE ENAME = 'SCOTT'
                  );


SELECT *
  FROM EMP
 WHERE SAL IN (
                SELECT MAX(SAL)
                  FROM EMP
                GROUP BY DEPTNO
              );


SELECT *
  FROM EMP
 WHERE SAL < ALL (
                SELECT SAL
                  FROM EMP
                 WHERE DEPTNO = 30
             );


SELECT *
  FROM EMP
 WHERE EXISTS(
                SELECT DNAME
                  FROM DEPT
                 WHERE DEPTNO = 10
             );


SELECT E10.EMPNO, E10.ENAME, E10.DEPTNO, D.DNAME, D.LOC
  FROM (
        SELECT * FROM EMP WHERE DEPTNO = 10
       ) E10,
       (
        SELECT * FROM DEPT
       ) D
 WHERE E10.DEPTNO = D.DEPTNO;


SELECT E.JOB, E.EMPNO, E.ENAME, E.SAL, E.DEPTNO, D.DNAME
  FROM EMP E, DEPT D
 WHERE E.DEPTNO = D.DEPTNO
   AND E.JOB = (
                SELECT JOB
                  FROM EMP
                 WHERE ENAME = 'ALLEN'
               );


SELECT E.EMPNO, E.ENAME, D.DNAME, E.HIREDATE, D.LOC, E.SAL
     , (SELECT GRADE
          FROM SALGRADE
         WHERE E.SAL BETWEEN LOSAL AND HISAL
       ) GRADE
  FROM EMP E, DEPT D
 WHERE E.DEPTNO = D.DEPTNO
   AND SAL > (
                SELECT AVG(SAL)
                  FROM EMP
             )
ORDER BY SAL DESC, EMPNO;


SELECT E.EMPNO, E.ENAME, E.JOB, E.DEPTNO, D.DNAME, D.LOC
  FROM EMP E, DEPT D
 WHERE E.DEPTNO = D.DEPTNO
   AND E.DEPTNO = 10
   AND JOB NOT IN (
                SELECT JOB
                  FROM EMP
                 WHERE DEPTNO = 30
              );

SELECT E.EMPNO, E.ENAME, E.SAL, S.GRADE
  FROM EMP E, SALGRADE S
 WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL
   AND SAL > (
                SELECT MAX(SAL)
                  FROM EMP
                 WHERE JOB = 'SALESMAN'
             );




INSERT INTO DEPT_TEMP(DEPTNO, DNAME, LOC)
VALUES (50, 'DATABASE', 'SEOUL');


SELECT * FROM DEPT_TEMP;

INSERT INTO DEPT_TEMP
VALUES(60, 'NETWORK', 'BUSAN');


INSERT INTO DEPT_TEMP(DEPTNO, DNAME, LOC)
VALUES(70, 'WEB', NULL);


INSERT INTO DEPT_TEMP
VALUES(80, 'MOBILE', '');


INSERT INTO DEPT_TEMP(DEPTNO, LOC)
VALUES(90, 'INCHEON');

CREATE TABLE EMP_TEMP
AS SELECT * FROM EMP
WHERE 1 <> 1;




INSERT INTO EMP_TEMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES(9999, '홍길동', 'PRESIDENT', NULL, TO_DATE('2001/01/01', 'YYYY/MM/DD'), 5000, 1000, 10);

INSERT INTO EMP_TEMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES(1111, '성춘향', 'MANAGER', 9999, TO_DATE('2001/01/05', 'YYYY/MM/DD'), 4000, NULL, 20);


INSERT INTO EMP_TEMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES(2111, '이순신', 'MANAGER', 9999, TO_DATE('2001/01/07', 'YYYY/MM/DD'), 4000, NULL, 20);



INSERT INTO EMP_TEMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES(3111, '심청이', 'MANAGER', 9999, SYSDATE, 4000, NULL, 30);




SELECT * FROM EMP_TEMP;




INSERT INTO EMP_TEMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE, E.SAL, E.COMM, E.DEPTNO
  FROM EMP E, SALGRADE S
 WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL
   AND S.GRADE = 1;



CREATE TABLE DEPT_TEMP2
AS SELECT * FROM DEPT;


SELECT * FROM DEPT_TEMP2;


UPDATE DEPT_TEMP2
SET LOC = 'SEOUL';


ROLLBACK; 
 
DROP TABLE DEPT_TEMP2;  
 
 
UPDATE DEPT_TEMP2
SET DNAME = 'DATABASE',
    LOC = 'SEOUL'
WHERE DEPTNO = 40;
 
 
UPDATE DEPT_TEMP2
SET (DNAME, LOC) = (SELECT DNAME, LOC
                      FROM DEPT
                     WHERE DEPTNO = 40
                   )
WHERE DEPTNO = 40;
 
SELECT * FROM DEPT_TEMP2;

UPDATE DEPT_TEMP2
SET DNAME = (
                SELECT DNAME
                  FROM DEPT
                 WHERE DEPTNO = 40
            ),
      LOC = (
                SELECT LOC
                  FROM DEPT
                 WHERE DEPTNO = 40
            )
WHERE DEPTNO = 40;


UPDATE DEPT_TEMP2
SET LOC = 'SEOUL'
WHERE DEPTNO = (
                SELECT DEPTNO
                  FROM DEPT
                 WHERE DNAME = 'OPERATIONS'
               );

SELECT * FROM DEPT_TEMP2;



CREATE TABLE EMP_TEMP2
 AS SELECT * FROM EMP;


SELECT * FROM EMP_TEMP2;


DELETE FROM EMP_TEMP2
WHERE JOB = 'MANAGER';


DELETE FROM EMP_TEMP2
WHERE EMPNO IN (SELECT E.EMPNO
                  FROM EMP_TEMP2 E, SALGRADE S
                 WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL
                   AND S.GRADE = 3
                   AND DEPTNO = 30
               );


DELETE FROM EMP_TEMP2;


CREATE TABLE CHAP10HW_EMP 
AS SELECT * FROM EMP;


CREATE TABLE CHAP10HW_DEPT
AS SELECT * FROM DEPT;


CREATE TABLE CHAP10HW_SALGRADE 
AS SELECT * FROM SALGRADE;



SELECT * FROM CHAP10HW_TEMP;


 --Q1 287P
INSERT INTO CHAP10HW_DEPT (DEPTNO, DNAME, LOC)
VALUES(50, 'ORACLE', 'BUSAN');
INSERT INTO CHAP10HW_DEPT (DEPTNO, DNAME, LOC)
VALUES(60, 'SQL', 'ILSAN');
INSERT INTO CHAP10HW_DEPT (DEPTNO, DNAME, LOC)
VALUES(70, 'SELECT', 'INCHEON');
INSERT INTO CHAP10HW_DEPT (DEPTNO, DNAME, LOC)
VALUES(80, 'DML', 'BUNDANG');

SELECT * FROM CHAP10HW_DEPT;
SELECT * FROM CHAP10HW_EMP;
--Q2
INSERT INTO CHAP10HW_EMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES(7201, 'TEST_USER1', 'MANAGER', 7788, TO_DATE('20160102', 'YYYY-MM-DD'), 4500, NULL, 50);
INSERT INTO CHAP10HW_EMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES(7202, 'TEST_USER2', 'CLERK', 7201, TO_DATE('20160221', 'YYYY-MM-DD'), 1800, NULL, 50);
INSERT INTO CHAP10HW_EMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES(7203, 'TEST_USER3', 'ANALYST', 7201, TO_DATE('20160411', 'YYYY-MM-DD'), 3400, NULL, 60);
INSERT INTO CHAP10HW_EMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES(7204, 'TEST_USER4', 'SALESMAN', 7201, TO_DATE('20160531', 'YYYY-MM-DD'), 2700, 300, 60);
INSERT INTO CHAP10HW_EMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES(7205, 'TEST_USER5', 'CLERK', 7201, TO_DATE('20160720', 'YYYY-MM-DD'), 2600, NULL, 70);
INSERT INTO CHAP10HW_EMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES(7206, 'TEST_USER6', 'CLERK', 7201, TO_DATE('20160908', 'YYYY-MM-DD'), 2600, NULL, 70);
INSERT INTO CHAP10HW_EMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES(7207, 'TEST_USER7', 'LECTURER', 7201, TO_DATE('20161028', 'YYYY-MM-DD'), 2300, NULL, 80);
INSERT INTO CHAP10HW_EMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES(7208, 'TEST_USER8', 'STUDENT', 7201, TO_DATE('20180309', 'YYYY-MM-DD'), 1200, NULL, 80);



UPDATE CHAP10HW_EMP
SET DEPTNO = 70
WHERE SAL > (
             SELECT AVG(SAL)
               FROM CHAP10HW_EMP
              WHERE DEPTNO = 50
            );


SELECT * FROM CHAP10HW_EMP;


-- 60번 부서의 사원 중 입사일이 가장 빠른 사원보다 늦게 입사한 사원의 급여를 10% 인상 후 80번 부서로 이동
UPDATE CHAP10HW_EMP
SET SAL = SAL * 1.10,
    DEPTNO = 80
WHERE HIREDATE > (
                    SELECT MIN(HIREDATE)
                      FROM CHAP10HW_EMP
                     WHERE DEPTNO = 60
                 );


SELECT *
  FROM EMP
 WHERE HIREDATE > (SELECT MIN(HIREDATE)
                     FROM EMP)
   AND DEPTNO = 60;


-- 신용등급이 5인 사람을 삭제
DELETE CHAP10HW_EMP
WHERE DEPTNO IN (
                    SELECT E.DEPTNO
                      FROM CHAP10HW_EMP E, CHAP10HW_SALGRADE S
                     WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL
                       AND S.GRADE = 5
               );




CREATE TABLE DEPT_TCL
AS SELECT * FROM DEPT;

SELECT * FROM DEPT_TCL;


INSERT INTO DEPT_TCL
VALUES(50, 'DATABASE', 'SEOUL');

UPDATE DEPT_TCL
SET LOC = 'BUSAN'
WHERE DEPTNO = 40;

DELETE FROM DEPT_TCL
WHERE DNAME = 'RESEARCH';

SELECT * FROM DEPT_TCL;


ROLLBACK;


CREATE TABLE EMP_DDL(
    EMPNO NUMBER(4),
    ENAME VARCHAR2(10),
    JOB VARCHAR2(9),
    MGR NUMBER(4),
    HIREDATE DATE,
    SAL NUMBER(7, 2),
    COMM NUMBER(7, 2),
    DEPTNO NUMBER(2)
);


DESC EMP_DDL;



CREATE TABLE DEPT_DDL
AS SELECT * FROM DEPT;

DESC DEPT_DDL;


CREATE TABLE EMP_DDL30
AS SELECT *
FROM EMP
WHERE DEPTNO = 30;

SELECT * FROM EMP_DDL30;

CREATE TABLE EMPDEPT_DDL
AS SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE, E.SAL, E.COMM, D.DEPTNO, D.DNAME, D.LOC
FROM EMP E, DEPT D
WHERE 1 <> 1;

SELECT * FROM EMPDEPT_DDL;


CREATE TABLE EMP_ALTER
AS SELECT * FROM EMP;

SELECT * FROM EMP_ALTER;

ALTER TABLE EMP_ALTER
ADD HP VARCHAR2(20);


ALTER TABLE EMP_ALTER
RENAME COLUMN HP TO TEL;


ALTER TABLE EMP_ALTER
MODIFY EMPNO NUMBER(5);


DESC EMP_ALTER;


ALTER TABLE EMP_ALTER
DROP COLUMN TEL;

SELECT * FRPM DEOP_ALTER

RENAME EMP_ALTER TO EMP_RENAME;


SELECT * FROM EMP_RENAME;

TRUNCATE TABLE EMP_RENAME;

                                                                                                                                                                                                                                                                                                                                                                                                            
DROP TABLE EMP_RENAME;


CREATE TABLE EMP_HW(
    EMPNO NUMBER(4),
    ENAME VARCHAR2(10),
    JOB VARCHAR2(9),
    MGR NUMBER(4),
    HIREDATE DATE,
    SAL NUMBER(7, 2),
    COMM NUMBER(7, 2),
    DEPTNO NUMBER(2)
);

DESC EMP_HW;



ALTER TABLE EMP_HW
ADD BIGO VARCHAR2(20);

ALTER TABLE EMP_HW
MODIFY BIGO VARCHAR2(30);


ALTER TABLE EMP_HW
RENAME COLUMN BIGO TO REMARK;


INSERT INTO EMP_HW(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO FROM EMP;

SELECT * FROM EMP_HW;


DROP TABLE EMP_HW;


SELECT * FROM DICT;


SELECT TABLE_NAME
  FROM USER_TABLES;


SELECT OWNER, TABLE_NAME
  FROM ALL_TABLES;


SELECT * FROM DBA_TABLES;

SELECT *
  FROM USER_INDEXES;

SELECT *
  FROM USER_IND_COLUMNS;

CREATE INDEX IDX_EMP_SAL
ON EMP(SAL);

DROP INDEX IDX_EMP_SAL;

CREATE VIEW VW_EMP20
  AS (
        SELECT EMPNO, ENAME, JOB, DEPTNO
          FROM EMP
         WHERE DEPTNO = 20
     );


SELECT * FROM USER_VIEWS;

SELECT * FROM VW_EMP20;


DROP VIEW VW_EMP20;


SELECT ROWNUM, E.*
  FROM EMP E;
  
  
SELECT ROWNUM, E.*
  FROM EMP E
ORDER BY SAL DESC;


SELECT ROWNUM, E.*
  FROM (
        SELECT *
          FROM EMP E
        ORDER BY SAL DESC
       ) E;


WITH E AS (SELECT * FROM EMP ORDER BY SAL DESC)
SELECT ROWNUM, E.*
  FROM E;



SELECT ROWNUM, E.*
  FROM (
        SELECT *
          FROM EMP E
        ORDER BY SAL DESC
       ) E
 WHERE ROWNUM <= 3;


WITH E AS (
            SELECT *
              FROM EMP
            ORDER BY SAL DESC
          )
SELECT ROWNUM, E.* 
  FROM E
 WHERE ROWNUM <= 3;


CREATE TABLE DEPT_SEQUENCE
AS SELECT *
     FROM DEPT
    WHERE 1 <> 1;
    
SELECT * FROM DEPT_SEQUENCE;


CREATE SEQUENCE SEQ_DEPT_SEQUENCE
 INCREMENT BY 10
 START WITH 10
 MAXVALUE 90
 MINVALUE 0
 NOCYCLE
 CACHE 2;




SELECT *
  FROM USER_SEQUENCE;


INSERT INTO DEPT_SEQUENCE (DEPTNO, DNAME, LOC)
VALUES(SEQ_DEPT_SEQUENCE.NEXTVAL, 'DATABASE', 'SEOUL');



SELECT *
  FROM DEPT_SEQUENCE;


SELECT SEQ_DEPT_SEQUENCE.CURRVAL
  FROM DUAL;




ALTER SEQUENCE SEQ_DEPT_SEQUENCE
 INCREMENT BY 3
 MAXVALUE 99
 CYCLE;



SELECT *
  FROM USER_SEQUENCES;

INSERT INTO DEPT_SEQUENCE(DEPTNO, DNAME, LOC)
VALUES(SEQ_DEPT_SEQUENCE.NEXTVAL, 'DATABASE', 'SEOUL');

SELECT *
  FROM DEPT_SEQUENCE;

DROP SEQUENCE SEQ_DEPT_SEQUENCE;
SELECT * FROM USER_SEQUENCES;


CREATE SYNONYM E
   FOR EMP;

SELECT * FROM E;

DROP SYNONYM E;


CREATE TABLE EMPIDX
AS SELECT * FROM EMP
WHERE 1 <> 1;


CREATE INDEX IDX_EMPIDX_EMPNO
    ON EMPIDX(EMPNO);


SELECT *
  FROM USER_INDEXES
 WHERE INDEX_NAME = 'IDX_EMPIDX_EMPNO';


SELECT *
  FROM EMPIDX;


INSERT INTO EMPIDX
SELECT * FROM EMP;



CREATE OR REPLACE VIEW EMPIDX_OVER15K
AS (
        SELECT EMPNO, ENAME, JOB, DEPTNO, SAL
              ,CASE
                WHEN COMM IS NOT NULL THEN 'O'
                WHEN COMM = '0' THEN 'O'
                WHEN COMM IS NULL THEN 'X'
               END COMM
          FROM EMPIDX
         WHERE SAL > 1500
   );



SELECT *
  FROM EMPIDX_OVER15K;



CREATE TABLE DEPTSEQ
AS SELECT * FROM DEPT;

SELECT * FROM DEPTSEQ;



CREATE SEQUENCE SEQ_DEPT
 INCREMENT BY 1
 START WITH 1
 MAXVALUE 99
 MINVALUE 1
 NOCYCLE
 NOCACHE;


INSERT INTO DEPTSEQ(DEPTNO, DNAME, LOC)
VALUES(SEQ_DEPT.NEXTVAL, 'DATABASE', 'SEOUL');

INSERT INTO DEPTSEQ(DEPTNO, DNAME, LOC)
VALUES(SEQ_DEPT.NEXTVAL, 'WEB', 'BUSAN');

INSERT INTO DEPTSEQ(DEPTNO, DNAME, LOC)
VALUES(SEQ_DEPT.NEXTVAL, 'MOBILE', 'ILSAN');

SELECT *
  FROM DEPTSEQ;



CREATE TABLE TABLE_NOTNULL(
    LOGIN_ID VARCHAR2(20) NOT NULL,
    LOGIN_PWD VARCHAR(20) NOT NULL,
    TEL VARCHAR(20)
);


INSERT INTO TABLE_NOTNULL(LOGIN_ID, LOGIN_PWD)
VALUES('TEST_ID_01', '1234');

UPDATE TABLE_NOTNULL
SET LOGIN_ID = NULL
WHERE LOGIN_ID = 'TEST_ID_01';


SELECT OWNER, CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME
  FROM USER_CONSTRAINTS;


CREATE TABLE TABLE_NOTNULL2(
    LOGIN_ID VARCHAR2(20) CONSTRAINT TBLNN2_LGNID_NN NOT NULL,
    LOGIN_PWD VARCHAR2(20) CONSTRAINT TBLNN2_LGNPW_NN  NOT NULL,
    TEL VARCHAR2(20)
);

SELECT *
  FROM TABLE_NOTNULL;

ALTER TABLE TABLE_NOTNULL
MODIFY (TEL NOT NULL);


UPDATE TABLE_NOTNULL
SET TEL = '010-1234-5678'
WHERE LOGIN_ID = 'TEST_ID_01';


ALTER TABLE TABLE_NOTNULL2
MODIFY(TEL CONSTRAINT TBLNN_TEL_NN NOT NULL);



DESC TABLE_NOTNULL2;

ALTER TABLE TABLE_NOTNULL2
DROP CONSTRAINT TBLNN2_TEL_NN;

ALTER TABLE TABLE_NOTNULL2
RENAME CONSTRAINT TBLNN_TEL_NN TO TBLNN2_TEL_NN;


CREATE TABLE TABLE_UNIQUE(
    LOGIN_ID VARCHAR2(20) UNIQUE,
    LOGIN_PWD VARCHAR2(20) NOT NULL,
    TEL VARCHAR2(20)
);


DESC TABLE_UNIQUE;

SELECT OWNER, CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME
  FROM USER_CONSTRAINTS
 WHERE TABLE_NAME LIKE 'TABLE_UNIQUE%';


INSERT INTO TABLE_UNIQUE(LOGIN_ID, LOGIN_PWD, TEL)
VALUES(NULL, 'PWD01', '010-1234-5678');

SELECT * FROM TABLE_UNIQUE;

CREATE TABLE TABLE_UNIQUE2(
    LOGIN_ID VARCHAR2(20) CONSTRAINT TBLUNQ2_LGNID_UNQ UNIQUE,
    LOGIN_PWD VARCHAR2(20) CONSTRAINT TBLUNQ2_LGNPW_NN NOT NULL,
    TEL VARCHAR2(20)
);

DESC TABLE_UNIQUE2;



ALTER TABLE TABLE_UNIQUE
MODIFY(TEL UNIQUE); 

UPDATE TABLE_UNIQUE
SET TEL = NULL;

SELECT * FROM TABLE_UNIQUE2;

ALTER TABLE TABLE_UNIQUE2
MODIFY(TEL CONSTRAINT TBLUNQ_TEL_UNQ UNIQUE);

ALTER TABLE TABLE_UNIQUE2
RENAME CONSTRAINT TBLUNQ_TEL_UNQ TO TBLUNQ2_TEL_NUQ;



CREATE TABLE TABLE_PK(
    LOGIN_ID VARCHAR2(20) PRIMARY KEY,
    LOGIN_PWD VARCHAR2(20) NOT NULL,
    TEL VARCHAR2(20)
);


DESC TABLE_PK;

SELECT OWNER, CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME, INDEX_NAME
  FROM USER_CONSTRAINTS
 WHERE TABLE_NAME LIKE 'TABLE_PK%';

CREATE TABLE TABLE_PK2(
    LOGIN_ID VARCHAR2(20) CONSTRAINT TBLPK2_LGNID_PK PRIMARY KEY,
    LOGIN_PWD VARCHAR2(20) CONSTRAINT TBLPK2_LGNPW_NN NOT NULL,
    TEL VARCHAR2(20)
);


DESC TABLE_PK2;

INSERT INTO TABLE_PK(LOGIN_ID, LOGIN_PWD, TEL)
VALUES('TEST_ID_01', 'PWD02', '010-2345-6789');

SELECT *
  FROM TABLE_PK;


SELECT OWNER, CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME, R_OWNER, R_CONSTRAINT_NAME
  FROM USER_CONSTRAINTS
 WHERE TABLE_NAME IN ('EMP', 'DEPT');

CREATE TABLE DEPT_FK(
    DEPTNO NUMBER(2) CONSTRAINT DEPTFK_DEPTNO_PK PRIMARY KEY,
    DNAME VARCHAR2(14),
    LOC VARCHAR2(13)
);




CREATE TABLE EMP_FK(
    EMPNO NUMBER(4) CONSTRAINT EMPFK_DEPTNO_FK PRIMARY KEY,
    ENAME VARCHAR2(10),
    JOB VARCHAR2(9),
    MGR NUMBER(4),
    HIREDATE DATE,
    SAL NUMBER(7, 2),
    COMM NUMBER(7, 2),
    DEPTNO NUMBER(2) CONSTRAINT ENPFK_DEPTNO_FK REFERENCES DEPT_FK (DEPTNO)
);

INSERT INTO DEPT_FK(DEPTNO, DNAME, LOC)
VALUES(10, 'TEST_DNAME_01', 'TEST_LOC');


INSERT INTO EMP_FK
VALUES(9999, 'TEST_NMANE', 'TEST_JOB', NULL, TO_DATE('2001/01/01', 'YYYY/MM/DD'), 3000, NULL, 10);

SELECT * FROM EMP_FK;


SET SERVEROUTPUT ON;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Hello, PL/SQL!');
END;
/

DECLARE
V_EMPNO NUMBER(4) := 7788;
V_ENAME VARCHAR2(10);
BEGIN
    V_ENAME := 'SCOTT';
    DBMS_OUTPUT.PUT_LINE('V_EMPNO : ' || V_ENAME);
END;
/

DECLARE
 V_EMPNO NUMBER(4) := 5676;
 V_ENAME VARCHAR2(10);
BEGIN
 V_ENAME := 'GIGI';
 DBMS_OUTPUT.PUT_LINE(V_EMPNO || ' ' || V_ENAME);
END;
/


DECLARE
 V_TAX CONSTANT NUMBER(1) := 3;
BEGIN 
 DBMS_OUTPUT.PUT_LINE(V_TAX);
END;
/


DECLARE
 V_DEPTNO NUMBER(2) DEFAULT 10;
BEGIN
 DBMS_OUTPUT.PUT_LINE(V_DEPTNO);
 V_DEPTNO := V_DEPTNO + 5;
 DBMS_OUTPUT.PUT_LINE(V_DEPTNO);
 V_DEPTNO := V_DEPTNO - 5;
 DBMS_OUTPUT.PUT_LINE(V_DEPTNO);
 V_DEPTNO := 4;
 DBMS_OUTPUT.PUT_LINE(V_DEPTNO);
END;
/

-- NOT NULL : V_DEPTNO는 NULL값을 가질 수 없다
DECLARE
 V_DEPTNO NUMBER(2) NOT NULL := 10;
BEGIN
 DBMS_OUTPUT.PUT_LINE(V_DEPTNO);
END;
/

-- NOT NULL DEFAULT X_DEPTNO는 NULL을 가질 수 없고 기본값은 10이다.
DECLARE
 X_DEPTNO NUMBER(2) NOT NULL DEFAULT 10;
BEGIN
 DBMS_OUTPUT.PUT_LINE(X_DEPTNO);
END;
/


-- %TYPE : 참조형, 데이터베이스에 존재하는 특정한 컬럼과 같은 자료형이 된다.
DECLARE 
 V_DEPTNO DEPT.DEPTNO%TYPE := 20;
BEGIN
 DBMS_OUTPUT.PUT_LINE(V_DEPTNO);
END;
/

-- ROWTYPE : 하나의 열이 아닌 행 구조를 참조 -> DEPTNO 가 20 인 사람의 DEPTNO, DNAME, LOC을 가져온다.
DECLARE
 C_DEPTROW DEPT%ROWTYPE;
BEGIN
 SELECT DEPTNO, DNAME, LOC INTO C_DEPTROW
   FROM DEPT
  WHERE DEPTNO = 20;
 DBMS_OUTPUT.PUT_LINE('DEPTNO : ' || C_DEPTROW.DEPTNO);
 DBMS_OUTPUT.PUT_LINE('DNAME : ' || C_DEPTROW.DNAME);
 DBMS_OUTPUT.PUT_LINE('LOC : ' || C_DEPTROW.LOC);
END;
/

DECLARE 
 V_NUMBER NUMBER := 11;
BEGIN
 IF MOD(V_NUMBER, 2) = 1 THEN
   DBMS_OUTPUT.PUT_LINE(V_NUMBER || ' ' || '는 홀수입니다');
 END IF;
END;
/


DECLARE 
 V_NUMBER NUMBER := 14;
BEGIN
 IF MOD(V_NUMBER, 2) = 1
  THEN DBMS_OUTPUT.PUT_LINE('V_NUMBER 는 홀수입니다.');
 ELSE
  DBMS_OUTPUT.PUT_LINE('V_NUMBER 는 짝수입니다.');
 END IF;
END;


DECLARE
 V_NUMBER NUMBER := 13;
BEGIN
 IF MOD(V_NUMBER, 2) = 1 THEN
  DBMS_OUTPUT.PUT_LINE('V_NUMBER 홀수입니다');
  END IF;
END;
/


DECLARE 
 V_SCORE NUMBER := 87;
BEGIN
 IF V_SCORE >= 90 THEN
  DBMS_OUTPUT.PUT_LINE('A학점');
 ELSIF V_SCORE >= 80 THEN
  DBMS_OUTPUT.PUT_LINE('B학점'); 
 ELSIF V_SCORE >= 70 THEN 
  DBMS_OUTPUT.PUT_LINE('C학점');
 ELSIF V_SCORE >= 60 THEN
  DBMS_OUTPUT.PUT_LINE('D학점');
 ELSE
  DBMS_OUTPUT.PUT_LINE('F학점');
 END IF;
END;


DECLARE
 V_SCORE NUMBER := 87;
BEGIN
 CASE TRUNC(V_SCORE/10)
  WHEN 10 THEN DBMS_OUTPUT.PUT_LINE('A학점');
  WHEN 9 THEN DBMS_OUTPUT.PUT_LINE('B학점');
  WHEN 8 THEN DBMS_OUTPUT.PUT_LINE('C학점');
  WHEN 7 THEN DBMS_OUTPUT.PUT_LINE('D학점');
  WHEN 6 THEN DBMS_OUTPUT.PUT_LINE('E학점');
  ELSE DBMS_OUTPUT.PUT_LINE('F학점');
 END CASE;
END;

-- FOR LOOP EXIT WHEN
DECLARE 
 V_NUM NUMBER := 0;
BEGIN
 LOOP
  DBMS_OUTPUT.PUT_LINE(V_NUM);
  V_NUM := V_NUM + 1;
  EXIT WHEN V_NUM = 4;
 END LOOP;
END;
/

-- FOR LOOP IF EXIT
DECLARE 
 V_NUM NUMBER := 0;
BEGIN
 LOOP
  DBMS_OUTPUT.PUT_LINE(V_NUM);
  V_NUM := V_NUM + 1;
  IF V_NUM = 4 THEN
   EXIT;
  END IF;
 END LOOP;
END;
/


-- WHILE LOOP
DECLARE 
 V_NUM NUMBER := 0;
BEGIN
 WHILE V_NUM < 4 LOOP
  DBMS_OUTPUT.PUT_LINE('현재 V_NUM : ' || V_NUM);
  V_NUM := V_NUM + 1;
 END LOOP;
END;
/



-- FOR LOOP 카운터 변수 사용
BEGIN
 FOR I IN 0..4 LOOP
  DBMS_OUTPUT.PUT_LINE(I);
 END LOOP;
END;
/

-- FOR LOOP 역순으로 출력
BEGIN
 FOR I IN REVERSE 0..4 LOOP
  DBMS_OUTPUT.PUT_LINE(I);
 END LOOP;
END;
/


-- CONTINUE : 짝수만 출력
BEGIN 
 FOR I IN 0..10 LOOP
  CONTINUE WHEN MOD(I, 2) = 1;
  DBMS_OUTPUT.PUT_LINE(I);
 END LOOP;
END;
/

-- CONTINUE : 홀수만 출력
BEGIN 
 FOR I IN 0..10 LOOP
  CONTINUE WHEN MOD(I, 2) = 0;
   DBMS_OUTPUT.PUT_LINE(I);
 END LOOP;
END;
/


-- DEPT 테이블에서 DEPTNO별 DNAME을 출력, DEPTNO가 40번을 넘어가면 N/A 출력
DECLARE 
 V_DEPTNO DEPT%ROWTYPE;
 LOOPSTAT NUMBER(2) := 10;
BEGIN
 LOOP
 SELECT DEPTNO, DNAME, LOC INTO V_DEPTNO
   FROM DEPT
  WHERE DEPTNO = LOOPSTAT;
 IF LOOPSTAT <= 40 THEN
  DBMS_OUTPUT.PUT_LINE('DEPTNO = ' || LOOPSTAT || ' : ' || V_DEPTNO.DNAME);
 ELSE
  DBMS_OUTPUT.PUT_LINE('DEPTNO = ' || LOOPSTAT || ' : ' || 'N/A');
 END IF;
 LOOPSTAT := LOOPSTAT + 10;
 EXIT WHEN LOOPSTAT > 40;
 END LOOP;
END;
/


-- FOR LOOP 구구단
DECLARE
    RESULT_NUM NUMBER(2);
BEGIN
    FOR I IN 2..9 LOOP
        DBMS_OUTPUT.PUT_LINE(I ||'단 --------------------');
        FOR J IN 1..9 LOOP
            RESULT_NUM := (I * J);
            DBMS_OUTPUT.PUT_LINE(I || ' x ' || J || ' = ' || ' ' || RESULT_NUM);
        END LOOP;
    END LOOP;
END;
/


-- 1~20까지의 자연수 가운데 3의 배수만 합계를 구하고
-- 출력을 "TOTAL : " 로 합계를, "Last number : " 로 마지막 숫자를 출력하라

DECLARE 
 TOTAL NUMBER(2) := 0;
 LAST_NUMBER NUMBER(2);
BEGIN
 FOR I IN 1..20 LOOP
    IF MOD(I, 3) = 0 THEN
        TOTAL := TOTAL + I;
    ELSIF I = 20 THEN
        LAST_NUMBER := I;
    END IF;
 END LOOP;
 DBMS_OUTPUT.PUT_LINE('TOTAL : ' || TOTAL);
 DBMS_OUTPUT.PUT_LINE('LAST_NUMBER : ' || LAST_NUMBER);
END;
/


DECLARE 
 TYPE REC_DEPT IS RECORD(
    DEPTNO NUMBER(2) NOT NULL := 99,
    DNAME DEPT.DNAME%TYPE,
    LOC DEPT.LOC%TYPE
 );
 DEPT_REC REC_DEPT;
BEGIN
 DEPT_REC.DEPTNO := 90;
 DEPT_REC.DNAME := 'DATABASE';
 DEPT_REC.LOC := 'SEOUL';
 DBMS_OUTPUT.PUT_LINE('DEPTNO : ' || DEPT_REC.DEPTNO);
 DBMS_OUTPUT.PUT_LINE('DNAME : ' || DEPT_REC.DNAME);
 DBMS_OUTPUT.PUT_LINE('LOC : ' || DEPT_REC.LOC);
END;
/

-- 테이블 만들기
CREATE TABLE DEPT_RECORD
AS SELECT * FROM DEPT;
                                                         

SELECT * FROM DEPT_RECORD;

-- 레코드를 사용하여 INSERT
DECLARE
 TYPE REC_DEPT IS RECORD(
    DEPTNO NUMBER(2) NOT NULL := 99,
    DNAME DEPT.DNAME%TYPE,
    LOC DEPT.LOC%TYPE
 );
    DEPT_REC REC_DEPT;
BEGIN
    DEPT_REC.DEPTNO := 99;
    DEPT_REC.DNAME := 'DATABASE';
    DEPT_REC.LOC := 'SEOUL';
    
INSERT INTO DEPT_RECORD
VALUES DEPT_REC;
END;
/


-- 레코드를 사용하여 UPDATE
DECLARE
 TYPE REC_DEPT IS RECORD(
    DEPTNO NUMBER(2) NOT NULL := 99,
    DNAME DEPT.DNAME%TYPE,
    LOC DEPT.LOC%TYPE
 );
 DEPT_REC REC_DEPT;
BEGIN
    DEPT_REC.DEPTNO := 50;
    DEPT_REC.DNAME := 'DB';
    DEPT_REC.LOC := 'SEOUL';
    
UPDATE DEPT_RECORD
SET ROW = DEPT_REC
WHERE DEPTNO = 99;
END;
/


SELECT * FROM DEPT_RECORD;


-- 레코드를 포함하는 레코드(중첩 레코드)
DECLARE
 TYPE REC_DEPT IS RECORD(
    DEPTNO DEPT.DEPTNO%TYPE,
    DNAME DEPT.DNAME%TYPE,
    LOC DEPT.LOC%TYPE
 );
 TYPE REC_EMP IS RECORD(
    EMPNO EMP.EMPNO%TYPE,
    ENAME EMP.ENAME%TYPE,
    DINFO REC_DEPT
 );
 
 EMP_REC REC_EMP;
BEGIN
    SELECT E.EMPNO, E.ENAME, D.DEPTNO, D.DNAME, D.LOC
    --SELECT 한 컬럼들의 값을 INTO한 변수에다가 삽입한다.
    INTO EMP_REC.EMPNO, EMP_REC.ENAME, EMP_REC.DINFO.DEPTNO, EMP_REC.DINFO.DNAME, EMP_REC.DINFO.LOC
    FROM EMP E, DEPT D
    WHERE E.DEPTNO = D.DEPTNO
    AND E.EMPNO = 7788;
    
    DBMS_OUTPUT.PUT_LINE('EMPNO : ' || EMP_REC.EMPNO);
    DBMS_OUTPUT.PUT_LINE('ENAME : ' || EMP_REC.ENAME);
    DBMS_OUTPUT.PUT_LINE('DEPTNO : ' || EMP_REC.DINFO.DEPTNO);
    DBMS_OUTPUT.PUT_LINE('DNAME : ' || EMP_REC.DINFO.DNAME);
    DBMS_OUTPUT.PUT_LINE('LOC : ' || EMP_REC.DINFO.LOC);
END;
/


-- 연관 배열 사용하기
DECLARE 
    TYPE ITAB_EX IS TABLE OF VARCHAR2(20)
INDEX BY PLS_INTEGER;
TEXT_ARR ITAB_EX;

BEGIN
    TEXT_ARR(1) := '1ST DATA';
    TEXT_ARR(2) := '2ND DATA';
    TEXT_ARR(3) := '3RD DATA';
    TEXT_ARR(4) := '4TH DATA';
    
    DBMS_OUTPUT.PUT_LINE(TEXT_ARR(1));
    DBMS_OUTPUT.PUT_LINE(TEXT_ARR(2));
    DBMS_OUTPUT.PUT_LINE(TEXT_ARR(3));
    DBMS_OUTPUT.PUT_LINE(TEXT_ARR(4));
END;
/



-- 연관 배열 자료형에 레코드 사용하기
DECLARE
    TYPE REC_DEPT IS RECORD(
        DEPTNO DEPT.DEPTNO%TYPE,
        DNAME DEPT.DNAME%TYPE
    );
    
    TYPE ITAB_DEPT IS TABLE OF REC_DEPT
        INDEX BY PLS_INTEGER;
    
    DEPT_ARR ITAB_DEPT;
    IDX PLS_INTEGER := 0;
    
    
BEGIN
    FOR I IN (SELECT DEPTNO, DNAME FROM DEPT) LOOP
        IDX := IDX + 1;
        DEPT_ARR(IDX).DEPTNO := I.DEPTNO;
        DEPT_ARR(IDX).DNAME := I.DNAME;
        
        DBMS_OUTPUT.PUT_LINE(DEPT_ARR(IDX).DEPTNO || ' ' || DEPT_ARR(IDX).DNAME);
    END LOOP;
END;
/



DECLARE
    TYPE ITAB_DEPT IS TABLE OF DEPT%ROWTYPE
        INDEX BY PLS_INTEGER;
        
        DEPT_ARR ITAB_DEPT;
        IDX PLS_INTEGER := 0;
BEGIN
    FOR I IN (SELECT * FROM DEPT) LOOP
        IDX := IDX + 1;
        DEPT_ARR(IDX).DEPTNO := I.DEPTNO;
        DEPT_ARR(IDX).DNAME := I.DNAME;
        DEPT_ARR(IDX).LOC := I.LOC;
        
        DBMS_OUTPUT.PUT_LINE(DEPT_ARR(IDX).DEPTNO || ' : ' || DEPT_ARR(IDX).DNAME || ' : ' || DEPT_ARR(IDX).LOC);
    END LOOP;
END;
/


DECLARE 
    TYPE ITAB_EX IS TABLE OF VARCHAR2(20)
INDEX BY PLS_INTEGER;

TEXT_ARR ITAB_EX;

BEGIN
    TEXT_ARR(1) := '1ST DATA';
    TEXT_ARR(2) := '2ND DATA';
    TEXT_ARR(3) := '3RD DATA';
    TEXT_ARR(50) := '50TH DATA';
    
    DBMS_OUTPUT.PUT_LINE(TEXT_ARR.COUNT);
    DBMS_OUTPUT.PUT_LINE(TEXT_ARR.FIRST);
    DBMS_OUTPUT.PUT_LINE(TEXT_ARR.LAST);
    DBMS_OUTPUT.PUT_LINE(TEXT_ARR.PRIOR(50));
    DBMS_OUTPUT.PUT_LINE(TEXT_ARR.NEXT(50));
END;
/

-- 457P 1번
CREATE TABLE EMP_RECORD
AS SELECT * FROM EMP
WHERE 1 <> 1;

SELECT * FROM EMP_RECORD;


DECLARE
    TYPE REC_EMP IS RECORD(
        EMPNO EMP.EMPNO%TYPE NOT NULL := 1234,
        ENAME EMP.ENAME%TYPE,
        JOB EMP.JOB%TYPE,
        MGR EMP.MGR%TYPE,
        HIREDATE EMP.HIREDATE%TYPE,
        SAL EMP.SAL%TYPE,
        COMM EMP.COMM%TYPE,
        DEPTNO EMP.DEPTNO%TYPE
    );
    
    EMP_REC REC_EMP;
    
BEGIN
    EMP_REC.EMPNO := 1111;
    EMP_REC.ENAME := 'TEST_USER';
    EMP_REC.JOB := 'TEST_JOB';
    EMP_REC.MGR := NULL;
    EMP_REC.HIREDATE := TO_DATE('180301', 'YYMMDD');
    EMP_REC.SAL := 3000;
    EMP_REC.COMM := NULL;
    EMP_REC.DEPTNO := 40;
    
    
    INSERT INTO EMP_RECORD
    VALUES EMP_REC;
END;
/



SELECT * FROM EMP;


DECLARE
    TYPE REC_DEPT IS RECORD(
        EMPNO EMP.EMPNO%TYPE,
        ENAME EMP.ENAME%TYPE,
        JOB EMP.JOB%TYPE,
        MGR EMP.MGR%TYPE,
        HIREDATE EMP.HIREDATE%TYPE,
        SAL EMP.SAL%TYPE,
        COMM EMP.COMM%TYPE,
        DEPTNO EMP.DEPTNO%TYPE
    );
    
    TYPE ITAB_EMP IS TABLE OF REC_DEPT
        INDEX BY PLS_INTEGER;
        
    EMP_ARR ITAB_EMP;
    IDX PLS_INTEGER := 0;
BEGIN
    FOR I IN(SELECT * FROM EMP) LOOP
        IDX := IDX + 1;
        EMP_ARR(IDX).EMPNO := I.EMPNO;
        EMP_ARR(IDX).ENAME := I.ENAME;
        EMP_ARR(IDX).JOB := I.JOB;
        EMP_ARR(IDX).MGR := I.MGR;
        EMP_ARR(IDX).HIREDATE := I.HIREDATE;
        EMP_ARR(IDX).SAL := I.SAL;
        EMP_ARR(IDX).COMM := I.COMM;
        EMP_ARR(IDX).DEPTNO := I.DEPTNO;
        
        DBMS_OUTPUT.PUT_LINE(EMP_ARR(IDX).EMPNO || ' : ' ||
                             EMP_ARR(IDX).ENAME || ' : ' ||
                             EMP_ARR(IDX).JOB || ' : ' ||
                             EMP_ARR(IDX).MGR  || ' : ' ||
                             EMP_ARR(IDX).HIREDATE || ' : ' ||
                             EMP_ARR(IDX).SAL || ' : ' ||
                             EMP_ARR(IDX).COMM || ' : ' ||
                             EMP_ARR(IDX).DEPTNO
                            );
    END LOOP;
END;
/


-P458

DECLARE
/*
    TYPE REC_DEPT IS RECORD(
        EMPNO EMP.EMPNO%TYPE,
        ENAME EMP.ENAME%TYPE,
        JOB EMP.JOB%TYPE,
        MGR EMP.MGR%TYPE,
        HIREDATE EMP.HIREDATE%TYPE,
        SAL EMP.SAL%TYPE,
        COMM EMP.COMM%TYPE,
        DEPTNO EMP.DEPTNO%TYPE
    );
*/
-- 테이블의 전체 컬럼을 가져올때는 %ROWTYPE 가 더 효과적임
-- -> TYPE ITAB_EMP IS TABLE OF EMP%ROWTYPE
    TYPE ITAB_EMP IS TABLE OF EMP%ROWTYPE
        INDEX BY PLS_INTEGER;
        
    EMP_ARR ITAB_EMP;
    IDX PLS_INTEGER := 0;
BEGIN
    FOR I IN(SELECT * FROM EMP) LOOP
        IDX := IDX + 1;
        EMP_ARR(IDX).EMPNO := I.EMPNO;
        EMP_ARR(IDX).ENAME := I.ENAME;
        EMP_ARR(IDX).JOB := I.JOB;
        EMP_ARR(IDX).MGR := I.MGR;
        EMP_ARR(IDX).HIREDATE := I.HIREDATE;
        EMP_ARR(IDX).SAL := I.SAL;
        EMP_ARR(IDX).COMM := I.COMM;
        EMP_ARR(IDX).DEPTNO := I.DEPTNO;
        
        DBMS_OUTPUT.PUT_LINE(EMP_ARR(IDX).EMPNO || ' : ' ||
                             EMP_ARR(IDX).ENAME || ' : ' ||
                             EMP_ARR(IDX).JOB || ' : ' ||
                             EMP_ARR(IDX).MGR  || ' : ' ||
                             EMP_ARR(IDX).HIREDATE || ' : ' ||
                             EMP_ARR(IDX).SAL || ' : ' ||
                             EMP_ARR(IDX).COMM || ' : ' ||
                             EMP_ARR(IDX).DEPTNO
                            );
    END LOOP;
END;
/



DECLARE
    V_DEPT DEPT%ROWTYPE;
BEGIN
    SELECT DEPTNO, DNAME, LOC
      INTO V_DEPT
      FROM DEPT
     WHERE DEPTNO = 40;
    
    DBMS_OUTPUT.PUT_LINE(V_DEPT.DEPTNO);
    DBMS_OUTPUT.PUT_LINE(V_DEPT.DNAME);
    DBMS_OUTPUT.PUT_LINE(V_DEPT.LOC);
END;
/


-- CORSOR
DECLARE
    V_DEPT DEPT%ROWTYPE;
    --명시적 커서
    CURSOR C1 IS
        SELECT DEPTNO, DNAME, LOC
          FROM DEPT
         WHERE DEPTNO = 40;
BEGIN
    OPEN C1;
    FETCH C1 INTO V_DEPT;
    DBMS_OUTPUT.PUT_LINE(V_DEPT.DEPTNO);
    DBMS_OUTPUT.PUT_LINE(V_DEPT.DNAME);
    DBMS_OUTPUT.PUT_LINE(V_DEPT.LOC);
    
    CLOSE C1;
END;
/

-- 여러 행의 데이터를 커서에 저장하여 사용
DECLARE
    V_DEPT DEPT%ROWTYPE;
    
    CURSOR C1 IS
        SELECT DEPTNO, DNAME, LOC
          FROM DEPT;
    
BEGIN 
    OPEN C1;
    
    LOOP
        FETCH C1 INTO V_DEPT;
        EXIT WHEN C1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(V_DEPT.DEPTNO);
        DBMS_OUTPUT.PUT_LINE(V_DEPT.DNAME);
        DBMS_OUTPUT.PUT_LINE(V_DEPT.LOC);
    END LOOP;
    
    CLOSE C1;
END;
/


DECLARE
    CURSOR C1 IS
        SELECT DEPTNO, DNAME, LOC
          FROM DEPT;
BEGIN
    FOR C1_REC IN C1 LOOP
        DBMS_OUTPUT.PUT_LINE(C1_REC.DEPTNO || ' ' || C1_REC.DNAME || ' ' || C1_REC.LOC);
    END LOOP;
END;
/



-- 파라미터를 사용하는 커서
DECLARE 
    V_DEPT DEPT%ROWTYPE;
    CURSOR C1(P_DEPTNO DEPT.DEPTNO%TYPE) IS
        SELECT DEPTNO, DNAME, LOC
          FROM DEPT
         WHERE DEPTNO = P_DEPTNO;
BEGIN 
    OPEN C1(10);
        LOOP
            FETCH C1 INTO V_DEPT;
            EXIT WHEN C1%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('10번 부서 : ' || V_DEPT.DEPTNO || ' ' || V_DEPT.DNAME || ' ' || V_DEPT.LOC);
        END LOOP;
    CLOSE C1;
    OPEN C1(20);
        LOOP
            FETCH C1 INTO V_DEPT;
            EXIT WHEN C1%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('20번 부서 : ' || V_DEPT.DEPTNO || ' ' || V_DEPT.DNAME || ' ' || V_DEPT.LOC);
        END LOOP;
    CLOSE C1;
END;
/



DECLARE
    V_DEPTNO DEPT.DEPTNO%TYPE;
    CURSOR C1(P_DEPTNO DEPT.DEPTNO%TYPE) IS
        SELECT DEPTNO, DNAME, LOC
          FROM DEPT
         WHERE DEPTNO = P_DEPTNO;
BEGIN
    V_DEPTNO := &INPUT_DEPTNO;
    
    FOR C1_REC IN C1(V_DEPTNO) LOOP
        DBMS_OUTPUT.PUT_LINE(C1_REC.DEPTNO || ' ' || C1_REC.DNAME || ' ' || C1_REC.LOC);
    END LOOP;
END;
/

-- 묵시적 커서
BEGIN 
    UPDATE DEPT 
    SET DNAME = 'DATABASE'
    WHERE DEPTNO = 50;
    
    DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT);
    IF(SQL%FOUND) THEN
        DBMS_OUTPUT.PUT_LINE('갱신 대상 행 존재 여부 : TRUE');
    ELSE
        DBMS_OUTPUT.PUT_LINE('갱신 대상 행 존재 여부 : FALSE');
    END IF;
    IF(SQL%ISOPEN) THEN
        DBMS_OUTPUT.PUT_LINE('커서의 OPEN 여부 : TRUE');
    ELSE
        DBMS_OUTPUT.PUT_LINE('커서의 OPEN 여부 : FALSE');
    END IF;
END;
/



























































