-- 여러 행의 데이터를 커서에 저장하여 사용
DECLARE
    V_DEPT DEPT%ROWTYPE;
    
    CURSOR C1 IS
        SELECT DEPTNO, DNAME, LOC
          FROM DEPT;
    
BEGIN 
    OPEN C1;
    
    LOOP
        FETCH C1 INTO V_DEPT;
        EXIT WHEN C1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(V_DEPT.DEPTNO);
        DBMS_OUTPUT.PUT_LINE(V_DEPT.DNAME);
        DBMS_OUTPUT.PUT_LINE(V_DEPT.LOC);
    END LOOP;
    
    CLOSE C1;
END;
/


DECLARE
    CURSOR C1 IS
        SELECT DEPTNO, DNAME, LOC
          FROM DEPT;
BEGIN
    FOR C1_REC IN C1 LOOP
        DBMS_OUTPUT.PUT_LINE(C1_REC.DEPTNO || ' ' || C1_REC.DNAME || ' ' || C1_REC.LOC);
    END LOOP;
END;
/



-- 파라미터를 사용하는 커서
DECLARE 
    V_DEPT DEPT%ROWTYPE;
    CURSOR C1(P_DEPTNO DEPT.DEPTNO%TYPE) IS
        SELECT DEPTNO, DNAME, LOC
          FROM DEPT
         WHERE DEPTNO = P_DEPTNO;
BEGIN 
    OPEN C1(10);
        LOOP
            FETCH C1 INTO V_DEPT;
            EXIT WHEN C1%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('10번 부서 : ' || V_DEPT.DEPTNO || ' ' || V_DEPT.DNAME || ' ' || V_DEPT.LOC);
        END LOOP;
    CLOSE C1;
    OPEN C1(20);
        LOOP
            FETCH C1 INTO V_DEPT;
            EXIT WHEN C1%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('20번 부서 : ' || V_DEPT.DEPTNO || ' ' || V_DEPT.DNAME || ' ' || V_DEPT.LOC);
        END LOOP;
    CLOSE C1;
END;
/



DECLARE
    V_DEPTNO DEPT.DEPTNO%TYPE;
    CURSOR C1(P_DEPTNO DEPT.DEPTNO%TYPE) IS
        SELECT DEPTNO, DNAME, LOC
          FROM DEPT
         WHERE DEPTNO = P_DEPTNO;
BEGIN
    V_DEPTNO := &INPUT_DEPTNO;
    
    FOR C1_REC IN C1(V_DEPTNO) LOOP
        DBMS_OUTPUT.PUT_LINE(C1_REC.DEPTNO || ' ' || C1_REC.DNAME || ' ' || C1_REC.LOC);
    END LOOP;
END;
/

-- 묵시적 커서
BEGIN 
    UPDATE DEPT 
    SET DNAME = 'DATABASE'
    WHERE DEPTNO = 50;
    
    DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT);
    IF(SQL%FOUND) THEN
        DBMS_OUTPUT.PUT_LINE('갱신 대상 행 존재 여부 : TRUE');
    ELSE
        DBMS_OUTPUT.PUT_LINE('갱신 대상 행 존재 여부 : FALSE');
    END IF;
    IF(SQL%ISOPEN) THEN
        DBMS_OUTPUT.PUT_LINE('커서의 OPEN 여부 : TRUE');
    ELSE
        DBMS_OUTPUT.PUT_LINE('커서의 OPEN 여부 : FALSE');
    END IF;
END;
/



-- 명시적 커서 
DECLARE
    V_EMP EMP%ROWTYPE;
    
    CURSOR C1 IS
    SELECT * FROM EMP;

BEGIN
    OPEN C1;
    
    LOOP
        FETCH C1 INTO V_EMP;
        EXIT WHEN C1%NOTFOUND;
        
        DBMS_OUTPUT.PUT_LINE('EMPNO : ' || V_EMP.EMPNO || ', ' ||
                             'ENAME : ' || V_EMP.ENAME || ', ' ||
                             'JOB : ' || V_EMP.JOB || ', ' ||
                             'SAL : ' || V_EMP.SAL || ', ' ||
                             'DEPTNO : ' || V_EMP.DEPTNO
                            );
    END LOOP;
    CLOSE C1;
    DBMS_OUTPUT.PUT_LINE('PL/SQL 처리가 정상적으로 완료되었습니다.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('오류');
END;
/



-- 예외처리
DECLARE
    V_WRONG DATE;
BEGIN
    SELECT ENAME INTO V_WRONG
      FROM EMP
     WHERE EMPNO = 7369;
     
     DBMS_OUTPUT.PUT_LINE('예외가 발생하면 다음 문장은 실행되지 않습니다.');
     
EXCEPTION
    WHEN OTHERS THEN 
        DBMS_OUTPUT.PUT_LINE('오류가 발생하였습니다.' || TO_CHAR(SYSDATE, '[YYYY"년"MM"월"DD"일" HH24"시" MM"분" SS"초"]'));
        DBMS_OUTPUT.PUT_LINE('SQLCODE : ' || TO_CHAR(SQLCODE));
        DBMS_OUTPUT.PUT_LINE('SQLERRM : ' || SQLERRM);
END;
/



-- 프로시져 생성, DECLARE를 안쓴다.
CREATE OR REPLACE PROCEDURE PRO_NOPARAM
IS 
    V_EMPNO NUMBER(4) := 7788;
    V_ENAME VARCHAR2(10);
BEGIN
    V_ENAME := 'SCOTT';
    DBMS_OUTPUT.PUT_LINE('V_EMPNO : ' || V_EMPNO);
    DBMS_OUTPUT.PUT_LINE('V_ENAME : ' || V_ENAME);
END;
/

-- 프로시져 실행
EXECUTE PRO_NOPARAM;

-- 익명 블록에서 실행
BEGIN
    PRO_NOPARAM;
END;
/

-- USER_SOURCE 를 통해 프로시저 확인
SELECT *
  FROM USER_SOURCE
 WHERE NAME = 'PRO_NOPARAM';


SELECT TEXT
  FROM USER_SOURCE
 WHERE NAME = 'PRO_NOPARAM';



DROP PROCEDURE PRO_NOPARAM;


CREATE OR REPLACE PROCEDURE PRO_PARAM_IN
    (
    PARAM1 IN NUMBER,
    PARAM2 NUMBER,
    PARAM3 NUMBER := 3,
    PARAM4 NUMBER DEFAULT 4
    )
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('PARAM1 : ' || PARAM1);
    DBMS_OUTPUT.PUT_LINE('PARAM2 : ' || PARAM2);
    DBMS_OUTPUT.PUT_LINE('PARAM3 : ' || PARAM3);
    DBMS_OUTPUT.PUT_LINE('PARAM4 : ' || PARAM4);
END;
/


EXECUTE PRO_PARAM_IN(PARAM1 => 2, PARAM2 => 3);




CREATE OR REPLACE PROCEDURE PRO_PARAM_OUT
(
    IN_EMPNO IN EMP.EMPNO%TYPE,
    OUT_ENAME OUT EMP.ENAME%TYPE,
    OUT_SAL OUT EMP.SAL%TYPE
)
IS
BEGIN
    SELECT ENAME, SAL INTO OUT_ENAME, OUT_SAL
      FROM EMP
     WHERE EMPNO = IN_EMPNO;
END PRO_PARAM_OUT;
/



DECLARE 
    V_ENAME EMP.ENAME%TYPE;
    V_SAL EMP.SAL%TYPE;
BEGIN
    PRO_PARAM_OUT(7788, V_ENAME, V_SAL);
    DBMS_OUTPUT.PUT_LINE('ENAME : ' || V_ENAME);
    DBMS_OUTPUT.PUT_LINE('SAL : ' || V_SAL);
END;
/



-- INOUT 파라미터 : 입력을 받을때와 수행 후 결과값을 반환할 때 사용한다.
CREATE OR REPLACE PROCEDURE PRO_PARMA_INOUT
(
    INOUT_NO IN OUT NUMBER
)
IS
BEGIN
    INOUT_NO := INOUT_NO * 2;
END;
/


DECLARE
    NO NUMBER;
BEGIN
    NO :=5;
    PRO_PARMA_INOUT(NO);
    DBMS_OUTPUT.PUT_LINE('NO : ' || NO);
END;
/



CREATE OR REPLACE PROCEDURE PRO_ERR_OUT
(
    ERR_NO OUT NUMBER
    )
IS

BEGIN
    ERR_NO := 10;
    DBMS_OUTPUT.PUT_LINE('ERR_NO : ' || ERR_NO);
END;
/


EXECUTE PRO_ERR_OUT;


CREATE OR REPLACE FUNCTION FUNC_AFTERTAX(
    SAL IN NUMBER
)
RETURN NUMBER
IS
    TAX NUMBER := 0.05;
BEGIN
    RETURN(ROUND(SAL - (SAL * TAX)));
END;
/

-- PL/SQL 에서 함수 사용
DECLARE
    AFTERTAX NUMBER;
BEGIN
    AFTERTAX := FUNC_AFTERTAX(3000);
    DBMS_OUTPUT.PUT_LINE(AFTERTAX);
END;

--SQL 에서 함수 사용
SELECT FUNC_AFTERTAX(3000)
  FROM DUAL;
  

SELECT EMPNO, ENAME, SAL, FUNC_AFTERTAX(SAL) AFTERTAX
  FROM EMP;


DROP FUNCTION FUNC_AFTERTAX;



-- 세후 월급 함수
CREATE OR REPLACE FUNCTION FUNC_AFTERTAX(
    SAL IN NUMBER
)
RETURN NUMBER
IS
    TAX NUMBER := 0.05;
BEGIN
    RETURN(ROUND(SAL - (SAL * TAX)));
END;
/



-- 보너스를 합친 세후 월급 함수
CREATE OR REPLACE FUNCTION FUNC_GO(
    COMMSTAT IN NUMBER,
    SAL IN NUMBER
)
RETURN NUMBER
IS
    TAX NUMBER := 0.2;
BEGIN
    IF (COMMSTAT = 0) OR (COMMSTAT IS NULL) THEN
        RETURN ROUND(SAL - (SAL * TAX));
    ELSE
        RETURN ROUND((SAL + COMMSTAT) - ((SAL + COMMSTAT) * TAX));
    END IF;
END;
/

DROP FUNCTION FUNC_GO;

SELECT EMPNO, ENAME, (SAL || '$') SAL, COMM, (FUNC_GO(COMM, SAL) || '$') AFTER_TAX
  FROM EMP;



-- 패키지 생성
CREATE OR REPLACE PACKAGE PKG_EXAMPLE
IS
    SPEC_NO NUMBER := 10;
    FUNCTION FUNC_GO(COMM IN EMP.COMM%TYPE, SAL IN EMP.SAL%TYPE) RETURN NUMBER;
    PROCEDURE PRO_EMP(IN_EMPNO IN EMP.EMPNO%TYPE);
    PROCEDURE PRO_DEPT(IN_DEPTNO IN DEPT.DEPTNO%TYPE);
END;
/

DESC PKG_EXAMPLE;

SELECT TEXT
  FROM USER_SOURCE
 WHERE TYPE = 'PACKAGE'
   AND NAME = 'PKG_EXAMPLE';





-- 패키지 BODY
CREATE OR REPLACE PACKAGE BODY PKG_EXAMPLE
IS
    BODY_NO NUMBER := 10;
    
    FUNCTION FUNC_GO(COMM IN EMP.COMM%TYPE, SAL IN EMP.SAL%TYPE) RETURN NUMBER
    IS
        TAX NUMBER := 0.2;
    BEGIN
        IF (COMM = 0) OR (COMM IS NULL) THEN
            RETURN ROUND(SAL - (SAL * TAX));
        ELSE
            RETURN ROUND((SAL + COMM) - ((SAL + COMM) * TAX));
        END IF;
    END;    
    
    
    PROCEDURE PRO_EMP(IN_EMPNO IN EMP.EMPNO%TYPE)
    IS
        OUT_ENAME EMP.ENAME%TYPE;
        OUT_SAL EMP.SAL%TYPE;
    BEGIN
        SELECT ENAME, SAL INTO OUT_ENAME, OUT_SAL
          FROM EMP
         WHERE EMPNO = IN_EMPNO;
         
    DBMS_OUTPUT.PUT_LINE('ENAME : ' || OUT_ENAME);
    DBMS_OUTPUT.PUT_LINE('SAL : ' || OUT_SAL);
    END;

    
    PROCEDURE PRO_DEPT(IN_DEPTNO IN DEPT.DEPTNO%TYPE)
    IS
        OUT_DNAME DEPT.DNAME%TYPE;
        OUT_LOC DEPT.LOC%TYPE;
    BEGIN
        SELECT DNAME, LOC INTO OUT_DNAME, OUT_LOC
          FROM DEPT
         WHERE DEPTNO = IN_DEPTNO;
         
    DBMS_OUTPUT.PUT_LINE('DNAME : ' || OUT_DNAME);
    DBMS_OUTPUT.PUT_LINE('LOC : ' || OUT_LOC);
    END;

END;
/

-- 패키지 오버로드
CREATE OR REPLACE PACKAGE PKG_OVERLOAD
IS
    PROCEDURE PRO_EMP(IN_EMPNO IN EMP.EMPNO%TYPE);
    PROCEDURE PRO_EMP(IN_ENAME IN EMP.ENAME%TYPE);
END;
/

-- 오버로드 BODY
CREATE OR REPLACE PACKAGE BODY PKG_OVERLOAD
IS
    PROCEDURE PRO_EMP(IN_EMPNO IN EMP.EMPNO%TYPE)
    IS
        OUT_ENAME EMP.ENAME%TYPE;
        OUT_SAL EMP.SAL%TYPE;
    BEGIN
        SELECT ENAME, SAL INTO OUT_ENAME, OUT_SAL
          FROM EMP
         WHERE EMPNO = IN_EMPNO;
         
    DBMS_OUTPUT.PUT_LINE('ENAME : ' || OUT_ENAME);
    DBMS_OUTPUT.PUT_LINE('SAL : ' || OUT_SAL);
    END;
    
    PROCEDURE PRO_EMP(IN_ENAME IN EMP.ENAME%TYPE)
    IS
        OUT_ENAME EMP.ENAME%TYPE;
        OUT_SAL EMP.SAL%TYPE;
    BEGIN
        SELECT ENAME, SAL INTO OUT_ENAME, OUT_SAL
          FROM EMP
         WHERE ENAME = IN_ENAME;
         
    DBMS_OUTPUT.PUT_LINE('ENAME : ' || OUT_ENAME);
    DBMS_OUTPUT.PUT_LINE('SAL : ' || OUT_SAL);
    END;
END;
/



BEGIN
    DBMS_OUTPUT.PUT_LINE('AFTERTAX : ' || PKG_EXAMPLE.FUNC_GO(1000, 3000));
    PKG_EXAMPLE.PRO_EMP(7788);
    PKG_EXAMPLE.PRO_DEPT(10);
    PKG_OVERLOAD.PRO_EMP('SCOTT');
END;
/



CREATE TABLE EMP_TRG
AS SELECT * FROM EMP;

-- 해당하는 날짜에 추가, 수정, 삭제시 트리거 동작
CREATE OR REPLACE TRIGGER TRG_EMP_NODML
BEFORE
INSERT OR UPDATE OR DELETE ON EMP_TRG
BEGIN
    IF TO_CHAR(SYSDATE, 'DY') IN ('토', '일') THEN
    -- INSERTING 이라는 트리거를 가진 INSERT 문장이 실행되면 트리거 실행
        IF INSERTING THEN
            raise_application_error(-20000, '주말 사원정보 추가 불가');
        ELSIF UPDATING THEN
            raise_application_error(-20001, '주말 사원정보 수정 불가');
        ELSIF DELETING THEN
            raise_application_error(-20002, '주말 사원정보 삭제 불가');
        ELSE
            raise_application_error(-20003, '주말 사원정보 변경 불가');
        END IF;
    END IF;
END;
/

SELECT TO_CHAR(SYSDATE, 'DY')
FROM DUAL;

UPDATE EMP_TRG
SET SAL = 3500
WHERE EMPNO = 7788;



CREATE TABLE EMP_TRG_LOG(
    TABLENAME VARCHAR2(10),
    DML_TYPE VARCHAR2(10),
    EMPNO NUMBER(4),
    USER_NAME VARCHAR2(30),
    CHANGE_DATE DATE
);


CREATE OR REPLACE TRIGGER TRG_EMP_LOG
AFTER
INSERT OR UPDATE OR DELETE ON EMP_TRG
FOR EACH ROW

BEGIN
    IF INSERTING THEN
        INSERT INTO EMP_TRG_LOG
        VALUES('EMP_TRG', 'INSERT', :NEW.EMPNO, SYS_CONTEXT('USERENV', 'SESSION_USER'), SYSDATE);
    
    ELSIF UPDATING THEN
        INSERT INTO EMP_TRG_LOG
        VALUES('EMP_TRG', 'UPDATE', :OLD.EMPNO, SYS_CONTEXT('USERENV', 'SESSION_USER'), SYSDATE);
        
    ELSIF DELETING THEN
        INSERT INTO EMP_TRG_LOG
        VALUES('EMP_TRG', 'DELETE', :OLD.EMPNO, SYS_CONTEXT('USERENV', 'SESSION_USER'), SYSDATE);
    END IF;
END;
/

INSERT INTO EMP_TRG
VALUES(9999, 'TestEmp', 'CLERK', 7788, TO_DATE('2018-03-03', 'YYYY-MM-DD'), 1200, NULL, 20);


SELECT * FROM EMP_TRG_LOG;


UPDATE EMP_TRG
   SET SAL = 1300
 WHERE MGR = 7788;

-- 트리거 정보 조회
SELECT TRIGGER_NAME, TRIGGER_TYPE, TRIGGERING_EVENT, TABLE_NAME, STATUS
  FROM USER_TRIGGERS;


-- 프로시저
CREATE OR REPLACE PROCEDURE PRO_DEPT_IN
(
    IN_DEPTNO IN OUT DEPT.DEPTNO%TYPE,
    OUT_DNAME OUT DEPT.DNAME%TYPE,
    OUT_LOC OUT DEPT.LOC%TYPE
)
IS
    
BEGIN
    SELECT DEPTNO, DNAME, LOC INTO IN_DEPTNO, OUT_DNAME, OUT_LOC
      FROM DEPT
     WHERE DEPTNO = IN_DEPTNO;
END;
/


DECLARE
    V_DEPTNO DEPT.DEPTNO%TYPE;
    V_DNAME DEPT.DNAME%TYPE;
    V_LOC DEPT.LOC%TYPE;
BEGIN
    V_DEPTNO := 10;
    PRO_DEPT_IN(V_DEPTNO, V_DNAME, V_LOC);
    DBMS_OUTPUT.PUT_LINE('부서 번호 : ' || V_DEPTNO);
    DBMS_OUTPUT.PUT_LINE('부서 이름 : ' || V_DNAME);
    DBMS_OUTPUT.PUT_LINE('지역 : ' || V_LOC);
END;
/

CREATE OR REPLACE TRIGGER TRG_EMP_LOG
AFTER
INSERT OR UPDATE OR DELETE ON EMP_TRG
FOR EACH ROW

BEGIN
    IF INSERTING THEN
        INSERT INTO EMP_TRG_LOG
        VALUES('EMP_TRG', 'INSERT', :NEW.EMPNO, SYS_CONTEXT('USERENV', 'SESSION_USER'), SYSDATE);
    
    ELSIF UPDATING THEN
        INSERT INTO EMP_TRG_LOG
        VALUES('EMP_TRG', 'UPDATE', :OLD.EMPNO, SYS_CONTEXT('USERENV', 'SESSION_USER'), SYSDATE);
        
    ELSIF DELETING THEN
        INSERT INTO EMP_TRG_LOG
        VALUES('EMP_TRG', 'DELETE', :OLD.EMPNO, SYS_CONTEXT('USERENV', 'SESSION_USER'), SYSDATE);
    END IF;
END;
/

CREATE TABLE DEPT_TRG
AS SELECT * FROM DEPT;


CREATE TABLE DEPT_TRG_LOG(
    TABLENAME VARCHAR2(10),
    DML_TYPE VARCHAR2(10),
    DEPTNO NUMBER(2),
    USER_NAME VARCHAR2(30),
    CHANGE_DATE DATE
);


CREATE OR REPLACE TRIGGER TRG_DEPT_LOG
AFTER
INSERT OR UPDATE OR DELETE ON DEPT_TRG
FOR EACH ROW

BEGIN
    IF INSERTING THEN
        INSERT INTO DEPT_TRG_LOG
        VALUES('DEPT_TRG', 'INSERT', :NEW.DEPTNO, SYS_CONTEXT('USERENV', 'SESSION_USER'), SYSDATE);
    ELSIF UPDATING THEN
        INSERT INTO DEPT_TRG_LOG
        VALUES('DEPT_TRG', 'UPDATE', :OLD.DEPTNO, SYS_CONTEXT('USERENV', 'SESSION_USER'), SYSDATE);
    ELSIF DELETING THEN
        INSERT INTO DEPT_TRG_LOG
        VALUES('DEPT_TRG', 'DELETE', :OLD.DEPTNO, SYS_CONTEXT('USERENV', 'SESSION_USER'), SYSDATE);
    END IF;
END;


INSERT INTO DEPT_TRG
VALUES(99, 'TEST_DNAME', 'SEOUL');

UPDATE DEPT_TRG
SET LOC = 'TEST_LOC'
WHERE DEPTNO = 99;

DELETE FROM DEPT_TRG
WHERE DEPTNO = 99;

SELECT * FROM DEPT_TRG_LOG;



